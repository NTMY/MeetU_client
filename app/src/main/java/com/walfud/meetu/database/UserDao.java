package com.walfud.meetu.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Nick = new Property(3, String.class, "nick", false, "NICK");
        public final static Property Mood = new Property(4, String.class, "mood", false, "MOOD");
        public final static Property PortraitUrl = new Property(5, String.class, "portraitUrl", false, "PORTRAIT_URL");
        public final static Property PhoneNum = new Property(6, String.class, "phoneNum", false, "PHONE_NUM");
        public final static Property Imei = new Property(7, String.class, "imei", false, "IMEI");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"PASSWORD\" TEXT," + // 2: password
                "\"NICK\" TEXT," + // 3: nick
                "\"MOOD\" TEXT," + // 4: mood
                "\"PORTRAIT_URL\" TEXT," + // 5: portraitUrl
                "\"PHONE_NUM\" TEXT," + // 6: phoneNum
                "\"IMEI\" TEXT);"); // 7: imei
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(4, nick);
        }
 
        String mood = entity.getMood();
        if (mood != null) {
            stmt.bindString(5, mood);
        }
 
        String portraitUrl = entity.getPortraitUrl();
        if (portraitUrl != null) {
            stmt.bindString(6, portraitUrl);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(7, phoneNum);
        }
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(8, imei);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nick
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mood
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // portraitUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phoneNum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // imei
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNick(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMood(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPortraitUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhoneNum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImei(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
